// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
//
// TODO:
// - Tab through code actions (maybe global Tab mapping and editor/insert set to null?)
// - Fuzzy select code action? fuzzy live grep?
// - Make a `space h f` mapping again
//    - needs (1) symbol under cursor and (2) an open file at path cmd
// - Get persistent model syntax highlighting working
[
  {
    "bindings": {
      "cmd-h": "pane::ActivatePreviousItem",
      "cmd-shift-f": "workspace::ToggleZoom",
      "cmd-k": "command_palette::Toggle",
      "cmd-g": "git_panel::ToggleFocus",
      "cmd-shift-j": "workspace::ToggleBottomDock",
      "cmd-shift-k": "git_panel::FocusEditor"
    }
  },
  {
    "context": "Workspace",
    "bindings": {
      "cmd-r": null,
      "cmd-shift-r": null,
      "cmd-h": "pane::ActivatePreviousItem",
      "cmd-l": null,
      "cmd-shift-h": "workspace::ToggleLeftDock",
      "cmd-shift-l": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      // Re-think these, they kinda suck
      "cmd-r": "buffer_search::DeployReplace",
      "cmd-shift-r": ["pane::DeploySearch", { "replace_enabled": true }],
      "cmd-t": "terminal_panel::ToggleFocus",
      "cmd-h": "pane::ActivatePreviousItem",
      "cmd-l": "pane::ActivateNextItem",
      "cmd-shift-l": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "cmd-h": "pane::ActivatePreviousItem",
      "cmd-l": "pane::ActivateNextItem"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !menu",
    "bindings": {
      // Split navigation (hjkl)
      "space w h": "workspace::ActivatePaneLeft",
      "space w j": "workspace::ActivatePaneDown",
      "space w k": "workspace::ActivatePaneUp",
      "space w l": "workspace::ActivatePaneRight",
      "space w =": "vim::ResetPaneSizes",

      // Haskell
      "space h r": ["task::Spawn", { "task_name": "touch revdeps" }],
      "space h a": ["task::Spawn", { "task_name": "compile all" }],
      "space h t": [
        "task::Spawn",
        { "task_name": "toggle: test current spec" }
      ],
      "space h shift-t": [
        "task::Spawn",
        { "task_name": "toggle: run foundational tests" }
      ],
      "space h d": ["task::Spawn", { "task_name": "open moogle under cursor" }],
      "space h m": ["task::Spawn", { "task_name": "expand template haskell" }],

      // Diagnostics navigation
      "space e t": "outline::Toggle",
      "space e e": "diagnostics::Deploy",
      "space e j": "editor::GoToDiagnostic",
      "space e k": "editor::GoToPreviousDiagnostic",
      "space e o": "editor::Hover",
      "space e w": "diagnostics::ToggleWarnings",

      // Right dock
      "space g t": "git_panel::ToggleFocus",
      "space g shift-t": "workspace::ToggleLeftDock",
      "space f t": "project_panel::ToggleFocus",
      "space f shift-t": "workspace::ToggleLeftDock",
      "space o t": "outline_panel::ToggleFocus",
      "space o shift-t": "workspace::ToggleLeftDock",

      // File explorer / finder
      "space f f": "file_finder::Toggle",
      "space f r": "file_finder::Toggle", // just for muscle memory
      "space f b": "tab_switcher::Toggle",
      "space tab": ["workspace::SendKeystrokes", "space f b enter"],
      "space /": "pane::DeploySearch",

      // Window management
      "space w /": "pane::SplitRight",
      "space w -": "pane::SplitDown",
      "space w d": "pane::CloseActiveItem",
      "space w enter": "pane::CloseOtherItems",
      "space w shift-enter": "workspace::CloseInactiveTabsAndPanes",
      "space w D": "pane::CloseAllItems",

      // LSP actions
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g r": "editor::FindAllReferences",
      "g a": "editor::ToggleCodeActions",
      "shift-k": "editor::Hover",

      // Misc
      "space ;": "editor::ToggleComments",
      "space s": "workspace::Save",
      "space S": "workspace::SaveAll",
      "space #": "editor::SelectAllMatches",
      "enter": ["workspace::SendKeystrokes", "o escape k"],
      "shift-enter": ["workspace::SendKeystrokes", "O escape"],
      "space j": "vim::PushSneak",
      "space k": "vim::PushSneakBackward",
      "j": ["vim::Down", { "display_lines": true }],
      "k": ["vim::Up", { "display_lines": true }],

      // UI
      "space u h": "editor::ToggleInlayHints",
      "space u b": "editor::ToggleGitBlameInline",
      "cmd-shift-h": "workspace::ToggleLeftDock",
      "cmd-shift-l": "workspace::ToggleRightDock",
      "cmd-shift-k": "workspace::ToggleBottomDock",

      // Settings
      "space . k": "zed::OpenKeymap",
      "space . t": "zed::OpenTasks",
      "space . z": "zed::OpenSettings",

      // Git stuff
      "space g b": "git::Blame",
      "space g l": "editor::CopyPermalinkToLine",
      "space g P": "git::Push",

      // AI
      "space a t": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "GitDiff > Editor",
    "bindings": {
      "space g k": "editor::GoToPreviousHunk",
      "space g j": "editor::GoToHunk",
      "space g s": "git::StageAndNext",
      "space g S": "git::UnstageAndNext"
    }
  },
  {
    // Visual mode mappings (selection-specific)
    "context": "Editor && vim_mode == visual && !menu",
    "bindings": {
      // Just needed for the next binding, to sequence pressing enter
      "space cmd+alt+shift+s": "pane::DeploySearch",
      "space /": ["workspace::SendKeystrokes", "space cmd+alt+shift+s enter"],
      "space ;": "editor::ToggleComments",
      "space h d": ["task::Spawn", { "task_name": "open moogle for selection" }]
    }
  },
  {
    // Optional global context for file finder when no editor is open
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      "space f f": "file_finder::Toggle",
      "space w d": ["pane::CloseActiveItem", { "close_pinned": false }]
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "tab": "editor::ContextMenuNext",
      "shift-tab": "editor::ContextMenuPrevious"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "shift-tab": "menu::SelectPrevious",
      "tab": "menu::SelectNext",
      "enter": "picker::ConfirmCompletion"
    }
  },
  {
    "context": "FileFinder || (FileFinder > Picker > Editor) || (FileFinder > Picker > menu)",
    "bindings": {
      "cmd-/": "pane::SplitRight",
      "cmd--": "pane::SplitDown"
    }
  },
  {
    // Pane settings
    "context": "Pane",
    "bindings": {
      "space f f": "file_finder::Toggle",
      "space w d": ["pane::CloseActiveItem", { "close_pinned": false }]
      // hack to just close an item when muscle memory wants to switch to prev
      // TODO: figure out where I want this and use the key context to target it better!
      // Right now it affects editor view
      // "space tab": ["pane::CloseActiveItem", { "close_pinned": false }]
    }
  },
  // Right dock
  {
    "context": "GitPanel",
    "bindings": {
      "cmd-h": null,
      "space g t": "git_panel::ToggleFocus",
      "space g shift-t": "workspace::ToggleLeftDock",
      "space f t": "project_panel::ToggleFocus",
      "space f shift-t": "workspace::ToggleLeftDock",
      "space o t": "outline_panel::ToggleFocus",
      "space o shift-t": "workspace::ToggleLeftDock",
      "space g p": "git::Push",
      "space g P": "git::ForcePush"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "cmd-h": null,
      "space g t": "git_panel::ToggleFocus",
      "space g shift-t": "workspace::ToggleLeftDock",
      "space f t": "project_panel::ToggleFocus",
      "space f shift-t": "workspace::ToggleLeftDock",
      "space o t": "outline_panel::ToggleFocus",
      "space o shift-t": "workspace::ToggleLeftDock"
    }
  },
  {
    "context": "OutlinePanel",
    "bindings": {
      "cmd-h": null,
      "space g t": "git_panel::ToggleFocus",
      "space g shift-t": "workspace::ToggleLeftDock",
      "space f t": "project_panel::ToggleFocus",
      "space f shift-t": "workspace::ToggleLeftDock",
      "space o t": "outline_panel::ToggleFocus",
      "space o shift-t": "workspace::ToggleLeftDock"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "cmd-t": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "AgentPanel",
    "bindings": {
      "cmd-shift-h": "workspace::ToggleLeftDock",
      "cmd-shift-l": "workspace::ToggleRightDock",
      "cmd-shift-k": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "Diagnostics",
    "bindings": {
      "space e w": "diagnostics::ToggleWarnings"
    }
  }
]
